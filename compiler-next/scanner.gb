
type Position [
	start: number,
	end: number,
	line: number,
	source: string
]

type Token<Kind> [
	kind: Kind
] & Position

type Error [
	message: string,
	position: Position
]

type MatchFn (char: string) => boolean;

tk = {
	<Kind>(state, kind: Kind, consume: number): Token<Kind>
	return [ kind, start=state.index, end=(state.index+= consume), line=state.line, source=state.source ];
}

scan = {
	(source: string)
	
	length = source.length,
	var index = 0,
	var line = 0,
	var endLine = 0,

	matchWhile = {
		(match: MatchFn, consumed = 0)
		
	}
	
	matchString = {
		
	}
	
	error = {
	}

	skipWhitespace = {
	}

	next = {
		skipWhitespace()
		line = endLine
		
		index >= length ? return tk('eof');
		
		match(source, index)
			>> case('==', '=', '||', '|', '&&', '&', '>=', '>>', '>', '<','<=','{', '}')
				{ tk($) }
			>> case('#')
				{
					var n = 1
					while (index + n < length && source[index + n]) >> n++;
					return tk('comment', n);
				}
		


	}

}
